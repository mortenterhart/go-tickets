## Trivial Tickets Ticketsystem
## Copyright (C) 2019 The Contributors
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
##
##
## Ticketsystem Trivial Tickets
##
## Matriculation numbers: 3040018, 6694964, 3478222
## Lecture:               Programmieren II, INF16B
## Lecturer:              Herr Prof. Dr. Helmut Neemann
## Institute:             Duale Hochschule Baden-WÃ¼rttemberg Mosbach
##
## ---------------
## Revive Configuration and Rule Set
##

# --- Default Configuration ---
# ==============================

# When set to false, ignores files with "GENERATED"
# header, similar to golint
ignoreGeneratedHeader = false

# Sets the default severity to "warning"
severity = "warning"

# Sets the default failure confidence. This means
# that linting errors with less than 0.8 confidence
# will be ignored.
confidence = 0.8

# Sets the exit code for failures with
# severity "error"
errorCode = 1

# Sets the exit code for failures with
# severity "warning"
warningCode = 0


# ---     Linting Rules     ----
# ==============================

# Suggests using constant for magic numbers and
# string literals. See also
# https://en.wikipedia.org/wiki/Magic_number_(programming)#Unnamed_numerical_constants.
[rule.add-constant]
    arguments = [{maxLitCount = "5", allowStrs = "\"\"", allowInts = "0,1,2", allowFloats = "0.0,0.,1.0,1.,2.0,2."}]

# Warns when a function receives more parameters than
# the maximum set by the rule's configuration. Enforcing
# a maximum number of parameters helps to keep the code
# readable and maintainable.
[rule.argument-limit]
    arguments = [5]

# Blank import should be only in a main or test package,
# or have a comment justifying it.
[rule.blank-imports]

# Methods or fields of `struct` that have names different
# only by capitalization could be confusing.
[rule.confusing-naming]

# Function or methods that return multiple, no named,
# values of the same type could induce error.
[rule.confusing-results]

# By convention, `context.Context` should be the first
# parameter of a function. This rule spots function
# declarations that do not follow the convention. See
# also https://github.com/golang/go/wiki/CodeReviewComments#contexts.
[rule.context-as-argument]

# Basic types should not be used as a key in
# `context.WithValue`.
[rule.context-keys-type]

# Cyclomatic complexity is a measure of code complexity.
# Enforcing a maximum complexity per function helps to
# keep code readable and maintainable. Here we specify
# that the rule should fail if it detects code with
# higher complexity than 10.
[rule.cyclomatic]
    arguments = [10]

# Packages exposing functions that can stop program
# execution by exiting are hard to reuse. This rule
# looks for program exits in functions other than
# `main()` or `init()`.
[rule.deep-exit]

# Importing with `.` makes the programs much harder
# to understand because it is unclear whether names
# belong to the current package or to an imported
# package. More information here:
# https://github.com/golang/go/wiki/CodeReviewComments#import-dot.
[rule.dot-imports]
    severity = "error"

# Empty blocks make code less readable and could be
# a symptom of a bug or unfinished refactoring.
[rule.empty-block]

# By convention, for the sake of readability, variables
# of type `error` must be named with the prefix `err`.
[rule.error-naming]

# By convention, for the sake of readability, the errors
# should be last in the list of returned values by a
# function.
[rule.error-return]

# By convention, for better readability, error messages
# should not be capitalized or end with punctuation or
# a newline. More information here:
# https://github.com/golang/go/wiki/CodeReviewComments#error-strings.
[rule.error-strings]

# It is possible to get a simpler program by replacing
# `errors.New(fmt.Sprintf())` with `fmt.Errorf()`. This
# rule spots that kind of simplification opportunities.
[rule.errorf]

# Exported function and methods should have comments.
# This warns on undocumented exported functions and
# methods.
[rule.exported]

# This rule helps to enforce a common header for all
# source files in a project by spotting those files
# that do not have the specified header.
[rule.file-header]
    arguments = ["Trivial Tickets Ticketsystem"]

# If a function controls the flow of another by passing
# it information on what to do, both functions are said
# to be control-coupled. Coupling among functions must
# be minimized for better maintainability of the code.
# This rule warns on boolean parameters that create a
# control coupling.
[rule.flag-parameter]

# Functions returning too many results can be hard to
# understand/use.
[rule.function-result-limit]
    arguments = [3]

# Typically, functions with names prefixed with Get are
# supposed to return a value.
[rule.get-return]

# Checking if an error is nil to just after return the
# error or nil is redundant.
[rule.if-return]

# Warns when importing black-listed packages.
[rule.imports-blacklist]
    arguments = ["crypto/md5", "crypto/sha1"]

# By convention, for better readability, incrementing
# an integer variable by 1 is recommended to be done
# using the `++` operator. This rule spots expressions
# like `i += 1` and `i -= 1` and proposes to change them
# into `i++` and `i--`.
[rule.increment-decrement]

# To improve the readability of code, it is recommended
# to reduce the indentation as much as possible. This
# rule highlights redundant else-blocks that can be
# eliminated from the code.
[rule.indent-error-flow]

# A method that modifies its receiver value can have
# undesired behavior. The modification can be also
# the root of a bug because the actual value receiver
# could be a copy of that used at the calling site.
# This rule warns when a method modifies its receiver.
[rule.modifies-value-receiver]

# Packages should have comments. This rule warns on
# undocumented packages and when packages comments
# are detached to the package keyword.
[rule.package-comments]

# This rule suggests a shorter way of writing ranges
# that do not use the second value.
[rule.range]

# By convention, receiver names in a method should
# reflect their identity. For example, if the receiver
# is of type `Parts`, `p` is an adequate name for it.
# Contrary to other languages, it is not idiomatic
# to name receivers as `this` or `self`.
[rule.receiver-naming]

# Constant names like `false`, `true`, `nil`, function
# names like `append`, `make`, and basic type names
# like `bool`, and `byte` are not reserved words of
# the language; therefore they can be redefined. Even
# if possible, redefining these built-in names can lead
# to bugs very difficult to detect.
[rule.redefines-builtin-id]
    severity = "error"

# To improve the readability of code, it is recommended
# to reduce the indentation as much as possible. This
# rule highlights redundant `else`-blocks that can be
# eliminated from the code.
[rule.superfluous-else]

# Using unit-specific suffix like "Secs", "Mins", ...
# when naming variables of type `time.Duration` can be
# misleading, this rule highlights those cases.
[rule.time-naming]

# This rule warns when an exported function or method
# returns a value of an unexported type.
[rule.unexported-return]

# This rule suggests to remove redundant statements
# like a `break` at the end of a `case` block, for
# improving the code's readability.
[rule.unnecessary-stmt]

# This rule spots and proposes to remove unreachable
# code. More information here:
# https://en.wikipedia.org/wiki/Unreachable_code.
[rule.unreachable-code]

# This rule warns on unused parameters. Functions or
# methods with unused parameters can be a symptom of
# an unfinished refactoring or a bug.
[rule.unused-parameter]

# This rule proposes simplifications of variable
# declarations.
[rule.var-declaration]

# This rule warns when variable or package naming
# conventions are not followed. See
# https://github.com/golang/go/wiki/CodeReviewComments#variable-names
# for variable and package name conventions.
[rule.var-naming]
